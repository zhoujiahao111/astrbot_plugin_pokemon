# coding=utf-8
import random

from ..models import result, increment, emptyMove
from ..models.enums import 表名类, 操作类
from ..core import database
from ..game import pokemon
from ..services import move_services, team_services
from ..models.session import 会话类
from ..dtos import 升级需求经验值管理器


def 宝可梦生成方法(会话: 会话类, 编号: str) -> result.结果类:
    权重 = []
    for i in range(101):
        if 45 <= i <= 55:
            权重.append(10)
        elif 35 <= i <= 65:
            权重.append(7)
        elif 25 <= i <= 75:
            权重.append(4)
        elif 10 <= i <= 90:
            权重.append(2)
        else:
            权重.append(1)

    天赋值 = random.choices(range(101), weights=权重, k=1)[0]

    宝可梦数据模型 = 会话.json管理器.宝可梦图鉴.根据编号获取宝可梦(编号)

    # 获取基础技能
    招式名称列表 = move_services.初始招式学习方法(宝可梦数据模型.升级可学会招式列表)

    try:
        宝可梦 = {
            "编号": 宝可梦数据模型.编号,
            "昵称": 宝可梦数据模型.名称,
            "经验": 0,
            "天赋": 天赋值,  # 实际使用时需要除以100, 因为数据库字段类型是int
            "性格": 会话.json管理器.性格.随机返回一个性格名称(),
            "性别": random.choice(["雄", "雌"]),
            "心情": random.randint(40, 75),
            "招式名称列表": 招式名称列表,
        }
    except Exception as e:
        return result.结果类.失败方法("宝可梦生成未知错误: " + str(e))

    return result.结果类.成功方法(宝可梦)


async def 注册宝可梦存储方法(会话: 会话类, 宝可梦数据: dict, 是否新用户: bool) -> result.结果类:
    """
    初始化宝可梦后 存储入各类数据库, 使用手动事务管理。
    根据 `是否新用户` 来判断是执行完整的注册流程还是仅为老用户添加宝可梦。
    """

    招式名称列表 = 宝可梦数据.pop("招式名称列表")

    if 是否新用户:
        # 对于新用户，需要插入用户、队伍、宝可梦、招式、队伍成员的完整信息
        数据库操作列表 = [
            {
                "表名": 表名类.宝可梦表,
                "操作": 操作类.插入,
                "数据": 宝可梦数据
            },
            {
                '表名': 表名类.招式表,
                '操作': 操作类.删除,
                '条件': {'宝可梦ID': ("索引", 0)}  # ("索引", 0) 指向第一个操作插入的宝可梦ID
            },
            {
                '表名': 表名类.招式表,
                '操作': 操作类.插入,
                '数据': [{"宝可梦ID": ("索引", 0), "招式名称": i} for i in 招式名称列表]
            },
            {
                "表名": 表名类.队伍信息表,
                "操作": 操作类.插入,
                "数据": {
                    "用户ID": 会话.用户qq,
                    "队伍序号": 1,
                    "队伍名称": "启程之队"
                }
            },
            {
                "表名": 表名类.队伍成员表,
                "操作": 操作类.插入,
                "数据": {
                    "队伍ID": ("索引", 3),  # ("索引", 3) 指向第四个操作插入的队伍ID
                    "宝可梦ID": ("索引", 0),
                    "位置索引": 0
                }
            },
            {
                "表名": 表名类.用户表,
                "操作": 操作类.插入,
                "数据": {
                    "用户ID": 会话.用户qq,
                    "金钱": 会话.初始金钱数,
                    "当前队伍ID": ("索引", 3),
                }
            },
        ]
        成功消息 = f"🌄 新的旅程由此展开！与{宝可梦数据['昵称']}一同踏上征途吧\n输入「/pm 帮助」可查看指令信息"

    else:
        # 对于宝可梦丢失的老用户，首先获取其当前的队伍ID
        结果 = await team_services.获取当前队伍ID方法(会话.用户qq)

        if not 结果.是否成功:
            return 结果.失败方法(f"为老用户添加宝可梦时出错：{结果.错误信息}")

        队伍ID = 结果.数据信息

        # 仅需要插入宝可梦、招式，并将其加入到已存在的队伍中
        数据库操作列表 = [
            {
                "表名": 表名类.宝可梦表,
                "操作": 操作类.插入,
                "数据": 宝可梦数据
            },
            {
                '表名': 表名类.招式表,
                '操作': 操作类.删除,
                '条件': {'宝可梦ID': ("索引", 0)}
            },
            {
                '表名': 表名类.招式表,
                '操作': 操作类.插入,
                '数据': [{"宝可梦ID": ("索引", 0), "招式名称": i} for i in 招式名称列表]
            },
            {
                "表名": 表名类.队伍成员表,
                "操作": 操作类.插入,
                "数据": {
                    "队伍ID": 队伍ID,  # 使用已获取的队伍ID
                    "宝可梦ID": ("索引", 0),
                    "位置索引": 0  # 默认放入队伍的第一个位置
                }
            }
        ]
        成功消息 = f"🤝 欢迎回来，训练家！{宝可梦数据['昵称']}加入了你的队伍，成为你新的伙伴！"

    db = await database.获取数据库对象()
    结果 = await db.写入方法(数据库操作列表)

    if 结果.是否成功:
        return result.结果类.成功方法(成功消息)
    else:
        return 结果


async def 新建宝可梦队伍方法(
    会话,
    队伍名称: str,
    用户背包对象,
) -> result.结果类:
    # 判断用户有几个队伍
    db = await database.获取数据库对象()

    结果 = await db.单次查询方法(
        {
            "表名": 表名类.队伍信息表,
            "查询数据": ['队伍ID', '队伍序号', '队伍名称'],
            "条件": {
                "用户ID": 会话.用户qq
            }
        }
    )

    if not 结果.是否成功:
        return result.结果类.失败方法("队伍查询失败了")

    队伍列表 = 结果.数据信息

    if 队伍列表:
        队伍序号 = 队伍列表[-1]["队伍序号"] + 1
    else:
        队伍序号 = 1

    队伍上限 = 会话.初始最大队伍上限 + 用户背包对象.返回队伍上限修正值方法()

    if len(队伍列表) > 队伍上限 - 1:
        return result.结果类.失败方法(f"不行哦, 目前你的家只能放下{队伍上限}只队伍, 可以使用`/pm 商店`购买房产哦")

    # 判断队伍是否重名
    for i in 队伍列表:
        if 队伍名称 == i["队伍名称"]:
            return result.结果类.失败方法(f"等一下, 这么名字和你的第{i['队伍序号']}只队伍重名了, 换一个名称吧")

    # 创建新队伍
    结果 = await db.写入方法([
        {
            "表名": 表名类.队伍信息表,
            "操作": 操作类.插入,
            "数据": {"用户ID": 会话.用户qq, "队伍序号": 队伍序号, "队伍名称": 队伍名称},
        }
    ])

    if 结果.是否成功:
        return result.结果类.成功方法(f"{队伍名称} 队伍创建成功! 这是你的第{len(队伍列表) + 1}个队伍哦")
    else:
        return result.结果类.失败方法("队伍查询失败了")


async def 宝可梦添加方法(用户ID: int, 宝可梦数据: dict):
    """
    添加宝可梦到指定队伍的指定位置 !
    """
    db = await database.获取数据库对象()

    结果 = await db.单次查询方法(
        {
            "表名": 表名类.宝可梦表,
            "查询数据": "盒子序号",
            "条件": {
                "用户ID": 用户ID
            }
        }
    )

    if not 结果.是否成功:
        return result.结果类.失败方法("队伍查询失败了")

    try:
        最大序号 = max([i if i else -1 for i in 结果.数据信息])
        宝可梦数据["盒子序号"] = max(最大序号 + 1, 1)

        招式名称列表 = 宝可梦数据.pop("招式名称列表")

        结果 = await db.写入方法([
            {
                "表名": 表名类.宝可梦表,
                "操作": 操作类.插入,
                "数据": 宝可梦数据
            },
            {
                '表名': 表名类.招式表,
                '操作': 操作类.删除,
                '条件': {'宝可梦ID': ("索引", 0)}
            },
            {
                '表名': 表名类.招式表,
                '操作': 操作类.插入,
                '数据': [{"宝可梦ID": ("索引", 0), "招式名称": i} for i in 招式名称列表]
            }
        ])

        if not 结果.是否成功:
            return 结果.失败方法("宝可梦添加失败了")

    except Exception as e:
        return result.结果类.失败方法("未知错误: " + str(e))

    return result.结果类.成功方法("")


def 返回宝可梦等级方法(会话: 会话类, 经验: int, 成长速度: str) -> int:
    return 会话.json管理器.升级需求经验值.根据经验值获取等级(经验, 成长速度)


def 返回到达指定等级的所需经验值方法(管理器: 升级需求经验值管理器, 等级: int, 成长速度: str) -> int:
    所需经验 = 管理器.获取到达等级所需经验(等级, 成长速度)

    if 所需经验 is None:
        return 0
    return 所需经验

def 返回天赋值对应描述文本(天赋: int) -> str:
    if 天赋 >= 95:
        return "最棒"
    elif 天赋 >= 85:
        return "了不起"
    elif 天赋 >= 70:
        return "非常好"
    elif 天赋 >= 50:
        return "相当好"
    elif 天赋 >= 30:
        return "一般般"
    else:
        return "也许不行"


def 返回天赋值对应倍率(天赋: int) -> float:
    if 天赋 >= 95:
        return 1.20  # 最棒：20% 属性加成
    elif 天赋 >= 85:
        return 1.15  # 了不起：15% 属性加成
    elif 天赋 >= 70:
        return 1.10  # 非常好：10% 属性加成
    elif 天赋 >= 50:
        return 1.00  # 相当好/平均水平：无加成也无惩罚，作为基准
    elif 天赋 >= 30:
        return 0.90  # 一般般：10% 属性惩罚
    else:  # 天赋小于30
        return 0.80


async def 队伍批量转宝可梦对象方法(会话: 会话类, 宝可梦信息列表: list) -> result.结果类:
    对象列表 = []
    try:
        for 数据信息 in 宝可梦信息列表:
            招式列表 = await move_services.返回招式数据方法(数据信息["主键ID"], 会话)

            对象列表.append(
                pokemon.宝可梦类(
                    会话,
                    宝可梦数据字典=数据信息,
                    宝可梦图鉴信息=会话.json管理器.宝可梦图鉴.根据编号获取宝可梦(数据信息['编号']),
                    招式列表=招式列表
                )
            )
    except Exception as e:
        return result.结果类.失败方法("宝可梦类实例化失败: " + str(e))

    return result.结果类.成功方法(对象列表)


def 返回倍率影响后的属性方法(
    当前属性字典: dict,
    倍率字典: dict,
    宝可梦属性列表: list,
    天气属性倍率字典: dict,
    mega是否开启: bool
) -> dict:
    属性修正 = {
        k: int(v * 倍率字典.get(k, 1.0))
        for k, v in 当前属性字典.items()
    }

    if mega是否开启:
        属性修正 = {
            k: int(v * 1.4)
            for k, v in 属性修正.items()
        }

    # 计算天气对这只宝可梦的最终倍率
    天气倍率列表 = [天气属性倍率字典.get(attr, 1.0) for attr in 宝可梦属性列表]
    if len(天气倍率列表) == 1:
        天气最终倍率 = 天气倍率列表[0]
    else:  # 双属性
        天气最终倍率 = 1.0 + sum(m - 1 for m in 天气倍率列表)

    # 应用天气倍率
    结果字典 = {
        k: int(v * 天气最终倍率)
        for k, v in 属性修正.items()
    }

    if 结果字典 and len(结果字典) == 6:
        return 结果字典
    return 当前属性字典
